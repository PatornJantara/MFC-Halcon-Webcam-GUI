#include "pch.h"

#include "HalconBase.h"




CHalconBase::CHalconBase() {

}

CHalconBase::~CHalconBase() {


}

UINT CHalconBase::OpenCam() {

	UINT uRetCode = eNoErr;

	// Gen by Halcon
	//HObject  ho_Image;

	//Image Acquisition 01: Code generated by Image Acquisition 01
	//Image Acquisition 01: Attention: The initialization may fail in case parameters need to
	//Image Acquisition 01: be set in a specific order (e.g., image resolution vs. offset).
	OpenFramegrabber("DirectShow", 1, 1, 0, 0, 0, 0, "default", 8, "rgb", -1, "false",
		"default", "[0] ", 0, -1, &hv_AcqHandle);

	m_bFlgBusy = true;

	return uRetCode;

}


UINT CHalconBase::Live() {

	UINT uRetCode = eNoErr;

	GrabImageStart(hv_AcqHandle, -1);
	GrabImageAsync(&ho_Image, hv_AcqHandle,-1);

	return uRetCode;

}

UINT CHalconBase::Stop() {
	UINT uRetCode = eNoErr;

	CloseFramegrabber(hv_AcqHandle);

	m_bFlgBusy = false;

	return uRetCode;
}

void CHalconBase::SetParam(int nSelect, int nVal) {

	HTuple hv_Parameter[eCamParam::eEndCamParam] = {
		 "brightness",
		 "contrast",
		 "saturation",
		 "sharpness",
		 "white_balance",
		 "frame_rate",
		 "zoom",
	};

	if (nSelect == eFramerate)	 return;


	SetFramegrabberParam(hv_AcqHandle, hv_Parameter[nSelect], nVal);
}

// Use to show error if need 
void CHalconBase::GetErrCode(eErrorCode eErrorCode) {

	CString str;

	str.Format(_T("%d ."), eErrorCode);

	switch (eErrorCode)
	{
	case eNoErr:
		str += _T("No Error");
		break;
	case eErrNoFile:
		str += _T("Error File Not Found");
		break;
	
	case eErrConnect:
		str += _T("Error Cant Connect Webcam");
		break;
	
	//case eEndErrorCode:
	//	str += _T("No Error");
	//	break;
	
	default:
		str = _T("999999. Unknown Error");
		break;
	}

	if (eErrorCode != eNoErr)		AfxMessageBox(str);

}

